#ifndef RECTANGLE_SHAPE
#define RECTANGLE_SHAPE

#include "Shape.hpp"

using namespace sf;
using namespace std;

namespace onea
{

    template<typename T>
    class RectangleShape : public Shape<T>
    {

    public:
        RectangleShape(Vector2<T> position, Vector2<T> taille)
            : Shape<T>::Shape(position),
              m_taille(taille)
        {
            this->m_shape.push_back( LigneShape(this->m_position.x, this->m_position.y) );
        }

        bool contains(T x, T  y);

        bool contains(Vector2<T> point);

        bool intersect(Shape<T> shape);

    protected:
        virtual void draw(RenderTarget &target, RenderStates states);

        Vector2<T> m_taille;
    };
    
    

}

#endif // RECTANGLE_SHAPE
